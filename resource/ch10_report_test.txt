10.2.2 워드 문서 변환 함수 만들기


● python-docx 패키지 사용법 


<코드> ch10_report_test.py ----------------------------------------------------------------------------------------
from docx import Document

doc = Document() 			# (1) 새 문서 생성
doc.add_paragraph('이것은 샘플입니다.')  # (2) 문단 및 텍스트 추가
doc.save('샘플.docx') 			# (3) 문서 저장
</코드> -------------------------------------------------------------------------------------------------------------


● 워드 문서 변환 함수 만들기


<코드> ch10_report_ai.py ------------------------------------------------------------------------------------------
with st.spinner("작성 중..."):
	result = process_text(prompt, user_input)
	print(result)
	st.write(result)
</코드> -------------------------------------------------------------------------------------------------------------


<코드> ch10_report_test.py ----------------------------------------------------------------------------------------
from docx import Document
markdown_input = '''
## 생성형 AI의 개요와 발전 방향

### 생성형 AI의 정의와 기능
생성형 AI(Generative AI)는 머신러닝 알고리즘을 통해 새로운 데이터, 콘텐츠 또는 정보를 생성할 수 있는 기술을 의미한다. 이는 텍스트, 이미지, 음악 등 다양한 형태의 콘텐츠를 만들어내는 데 사용된다. 최근 몇 년 사이에 여러 기술이 발전하면서, 생성형 AI는 더욱 정교해지고 있으며, 사람의 창의적인 작업을 보조하거나 완전히 대체할 수 있는 잠재력을 가지게 되었다. 예를 들어, 오픈AI의 GPT-3와 같은 모델은 사용자의 입력에 기반하여 자연스러운 언어로 글을 작성하는 능력을 지니고 있다.

### 기술 발전의 배경
생성형 AI의 발전은 크게 데이터의 양과 품질, 컴퓨팅 파워의 증가, 그리고 알고리즘의 발전으로 인해 가능해졌다. 특히, 딥러닝 기술의 발전과 더불어 대량의 데이터를 처리하고 학습할 수 있는 능력이 강화되면서, AI는 보다 복잡한 패턴을 이해하고 이를 바탕으로 새로운 콘텐츠를 생성할 수 있게 되었다. 이러한 발전은 여러 산업 분야에도 큰 영향을 미치고 있으며, 특히 콘텐츠 제작, 교육, 의료 등에서 활용 가능성이 커지고 있다.
'''
doc = Document() 				# (1) 새 문서 생성
doc.add_paragraph('이것은 샘플입니다.') 	# (2) 문단 및 텍스트 추가
doc.save('샘플.docx') 				# (3) 문서 저장
</코드> -------------------------------------------------------------------------------------------------------------


<코드> ch10_report_test.py ---------------------------------------------------------------------------------------
from docx import Document
from io import BytesIO
from docx.shared import Pt
from docx.oxml.ns import qn

markdown_input = '''
## 생성형 AI의 개요와 발전 방향

### 생성형 AI의 정의와 기능
생성형 AI(Generative AI)는 머신러닝 알고리즘을 통해 새로운 데이터, 콘텐츠 또는 정보를 생성할 수 있는 기술을 의미한다. 이는 텍스트, 이미지, 음악 등 다양한 형태의 콘텐츠를 만들어내는 데 사용된다. 최근 몇 년 사이에 여러 기술이 발전하면서, 생성형 AI는 더욱 정교해지고 있으며, 사람의 창의적인 작업을 보조하거나 완전히 대체할 수 있는 잠재력을 가지게 되었다. 예를 들어, 오픈AI의 GPT-3와 같은 모델은 사용자의 입력에 기반하여 자연스러운 언어로 글을 작성하는 능력을 지니고 있다.

### 기술 발전의 배경
생성형 AI의 발전은 크게 데이터의 양과 품질, 컴퓨팅 파워의 증가, 그리고 알고리즘의 발전으로 인해 가능해졌다. 특히, 딥러닝 기술의 발전과 더불어 대량의 데이터를 처리하고 학습할 수 있는 능력이 강화되면서, AI는 보다 복잡한 패턴을 이해하고 이를 바탕으로 새로운 콘텐츠를 생성할 수 있게 되었다. 이러한 발전은 여러 산업 분야에도 큰 영향을 미치고 있으며, 특히 콘텐츠 제작, 교육, 의료 등에서 활용 가능성이 커지고 있다.
'''
# (1) MS워드 문서 변환 함수 정의[기존 (1)~(3)번 코드를 지우고 작성]
def markdown_to_docx(markdown_content: str, font_name: str, base_font_size: int):
	doc = Document()
	# (2) 샘플 텍스트를 줄 단위로 분할
	lines = markdown_content.split("\n")
	for line in lines:
		line = line.strip()
		if not line:
			continue
		# (3) 각 줄별로 다른 서식 지정
		# '## '(heading2 제목)로 시작되는 줄 감지
		if line.startswith("## "):
			paragraph = doc.add_paragraph() 		# 새 문단(paragraph) 추가
			run = paragraph.add_run(line[3:]) 		# '## ' 이후 텍스트 추가
			font = run.font 					# run 객체의 font 속성에 접근
			font.size = Pt(base_font_size + 5) 		# 폰트 크기 설정
			font.name = font_name 			# 폰트 종류 설정
			font.bold = True 					# 폰트 굵기 설정
			run._element.rPr.rFonts.set(qn('w:eastAsia'), font_name) # 한글 폰트 설정
		# '### '(heading3 제목)로 시작되는 줄 감지
		elif line.startswith("### "):
			paragraph = doc.add_paragraph()
			run = paragraph.add_run(line[4:])
			font = run.font
			font.size = Pt(base_font_size + 3)
			font.name = font_name
			font.bold = True
			run._element.rPr.rFonts.set(qn('w:eastAsia'), font_name)
		# 일반 문단
		else:
			paragraph = doc.add_paragraph()
			run = paragraph.add_run(line)
			font = run.font
			font.size = Pt(base_font_size)
			font.name = font_name
			run._element.rPr.rFonts.set(qn('w:eastAsia'), font_name)
	# (4) MS워드 문서 객체를 바이트 데이터로 반환
	byte_io = BytesIO() 	# 메모리상에서 바이트 데이터를 저장할 객체 생성
	doc.save(byte_io) 	# MS워드 문서(docx)를 바이트 스트림(BytesIO)에 저장
	byte_io.seek(0) 		# 스트림의 위치를 처음(0)으로 이동
	return byte_io 		# 바이트 데이터 반환

# (5) MS워드 문서 변환 함수 호출
font_name = "맑은 고딕"	# 한글 폰트 설정
base_font_size = 12 		# 기본 폰트 크기 설정
docx_file = markdown_to_docx(markdown_input, font_name, base_font_size)

# (6) 생성된 파일 저장
with open("샘플워드.docx", "wb") as f:
	f.write(docx_file.read())
</코드> ------------------------------------------------------------------------------------------------------------
